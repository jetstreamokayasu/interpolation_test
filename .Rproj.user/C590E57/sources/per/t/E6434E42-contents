

# normalizing<-function(data, max, min){
#   
#   max.data<-max(data)
#   min.data<-min(data)
#   
#   nized.data<-sapply(data, function(x){return((((x-min.data)/(max.data-min.data))*(max-min))+min)})
#   
#   return(nized.data)
#   
# }

uniDisMake<-function(N, R){
  #半径Rの円内に一様分布する点群を作る関数
  theta <- runif(N, min=0, max=2*pi)
  r <- sqrt(2*runif(N, min=0, max=0.5*R^2))
  df <- data.frame(x=r*cos(theta), y=r*sin(theta))
  #ggplot(df, aes(x=x, y=y)) + geom_point(color="blue")
  return(df)
  
  
}

#ランドスケープを計算
calcLandscape<-function(diag){
  
  maxscale <- 3
  thresh<-calcDiagCentroid.mk2(diag)[1]
  thresh.wei<-threshWeibull(diag)
  tseq <- seq(0, maxscale, length = 1000) #domain
  Land.dim1 <- landscape(diag[[1]], dimension = 1, KK = 1, tseq)
  plot(tseq, Land.dim1, type = "l", col=2, xlab = "(Birth + Death) / 2",ylab = "(Death - Birth) / 2", ylim=c(0, round(max(Land.dim1)+1)/2), main ="1-degree landscape")
  par(new=T)
  plot(tseq, rep(thresh, 1000), type = "l", xlab = "",ylab = "", ylim=c(0, round(max(Land.dim1)+1)/2))
  par(new=T)
  plot(tseq, rep(thresh.wei/2, 1000), type = "l", xlab = "",ylab = "", ylim=c(0, round(max(Land.dim1)+1)/2), col=4)
  
  if(length(diag[[1]][diag[[1]][,1]==2,])>0){
    Land.dim2 <- landscape(diag[[1]], dimension = 2, KK = 1, tseq)
    plot(tseq, Land.dim2, type = "l", col=3, xlab = "(Birth + Death) / 2",ylab = "(Death - Birth) / 2", ylim=c(0, round(max(Land.dim2)+1)/2), main ="2-degree landscape")
    par(new=T)
    plot(tseq, rep(thresh/2, 1000), type = "l", xlab = "",ylab = "", ylim=c(0, round(max(Land.dim2)+1)/2))
    par(new=T)
    plot(tseq, rep(thresh.wei/4, 1000), type = "l", xlab = "",ylab = "", ylim=c(0, round(max(Land.dim2)+1)/2), col=4)
    
    return(list(tseq=tseq, Land.dim1=Land.dim1, Land.dim2=Land.dim2))
    
  }else{return(return(list(tseq=tseq, Land.dim1=Land.dim1)))}
}

#ランドスケープを描写
plotLandscape<-function(land){
  
  plotland<-lapply(2:length(land), function(k)plot(land[[1]], land[[k]], type = "l", col=k, xlab = "(Birth + Death) / 2",ylab = "(Death - Birth) / 2", ylim=c(0, round(max(land[[k]])+1)/2), main =paste0(k-1, "-degree landscape")))
  
}

#ワイブル分布による閾値設定
threshWeibull<-function(diag){
  
  diag<-rawdiag(diag)
  dim1.per<-calcper(diag, 1)
  dim2.per<-calcper(diag, 2)
  all.per<-c(dim1.per, dim2.per)
  
  wei<-weibull.par(all.per, epsilon=1e-7)
  thresh<-qweibull(0.95, shape = wei[1], scale = wei[2])
  
  return(thresh)
  
}

#3次元図形をプロット
figurePlot<-function(X){
  
  plot3d(X)
  aspect3d("iso")
  
}
