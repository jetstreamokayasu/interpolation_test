require(RSNNS)
require(TDA)
require(myfs)
require(rgl)
# NOT RUN {
demo(rbf_irisSnnsR)
# }
# NOT RUN {
demo(rbf_sin)
# }
# NOT RUN {
demo(rbf_sinSnnsR)
# }
# NOT RUN {

inputs <- as.matrix(seq(0,10,0.1))
outputs <- as.matrix(sin(inputs) + runif(inputs*0.2))
outputs <- normalizeData(outputs, "0_1")

model <- rbf(inputs, outputs, size=40, maxit=1000, 
             initFuncParams=c(0, 1, 0, 0.01, 0.01), 
             learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)

par(mfrow=c(2,1))
plotIterativeError(model)
plot(inputs, outputs)
lines(inputs, fitted(model), col="green")
# }

sphere1<-sphereUnif(300, 2, 1)
plot3d(sphere1)

sphere1.dist<-distance(sphere1)
sphere1.vic1<-get.vicinity(sphere1.dist, 1, 30)
plot3d(sphere1[-sphere1.vic1[,2],])
points3d(sphere1[sphere1.vic1[,2],], col=3)

sphere.model <- rbf(rbind(sphere1[1, 1:2],sphere1[sphere1.vic1[,2], 1:2]), c(sphere1[1,3], sphere1[sphere1.vic1[,2], 3]), size=15, maxit=1000, 
             initFuncParams=c(0, 1, 0, 0.01, 0.01), 
             learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
plotIterativeError(sphere.model)
points3d(cbind(rbind(sphere1[1, 1:2],sphere1[sphere1.vic1[,2], 1:2]), fitted(sphere.model)), col=2)


sphere1.vic2<-get.vicinity(sphere1.dist, 2, 30)
plot3d(sphere1[-sphere1.vic2[,2],])
points3d(sphere1[sphere1.vic2[,2],], col=3)
aspect3d("iso")

sphere.model2 <- rbf(rbind(sphere1[2, 1:2],sphere1[sphere1.vic2[,2], 1:2]), c(sphere1[2,3], sphere1[sphere1.vic2[,2], 3]), size=15, maxit=1000, 
                    initFuncParams=c(0, 1, 0, 0.01, 0.01), 
                    learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)

points3d(cbind(rbind(sphere1[2, 1:2],sphere1[sphere1.vic2[,2], 1:2]), fitted(sphere.model2)), col=2)
#points3d(cbind(fitted(sphere.model2), sphere1[sphere1.vic2[,2], 2:3]), col=2)

sphere.model.all <- rbf(sphere1[, 1:2], sphere1[,3], size=100, maxit=2000, 
                     initFuncParams=c(0, 1, 0, 0.01, 0.01), 
                     learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
points3d(cbind(sphere1[, 1:2], fitted(sphere.model.all)), col=2)

sphere1.vic3<-get.vicinity(sphere1.dist, 3, 30)
plot3d(sphere1[-sphere1.vic3[,2],])
points3d(sphere1[sphere1.vic3[,2],], col=3)
aspect3d("iso")

sphere.model3 <- rbf(rbind(sphere1[3, 1:2],sphere1[sphere1.vic3[,2], 1:2]), c(sphere1[3,3], sphere1[sphere1.vic3[,2], 3]), size=15, maxit=100, 
                     initFuncParams=c(0, 1, 0, 0.01, 0.01), 
                     learnFuncParams=c(1e-8, 0, 1e-8, 0.1, 0.8), linOut=TRUE)
points3d(cbind(rbind(sphere1[3, 1:2],sphere1[sphere1.vic3[,2], 1:2]), sphere.model3[["fitted.values"]]), col=2)

sphere1vic3.pca<-prcomp(rbind(sphere1[3,],sphere1[sphere1.vic3[,2],]))
summary(sphere1vic3.pca)


sphere1.vic4<-get.vicinity(sphere1.dist, 4, 30)
vic4.line<-line.vics(4, sphere1.vic4)
plot3d(sphere1[-vic4.line,])
points3d(sphere1[vic4.line,], col=3)
sphere1vic4<-transform4rbfn(sphere1, 4, 30)
points3d(sphere1vic4, col = 2)
