}
return(pixel)
}
torus.vics1.pic<-pixelConvert(vics.pca[["x"]], 4)
torus.vics1.pic
image(torus.vics1.pic, col=c(0, 9))
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
gridLine(vics.pca[["x"]], 5)
gridLine(vics.pca[["x"]], 4)
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
gridLine(vics.pca[["x"]], 4)
dim(torus.vics1.pic)
neighEleCheck<-function(pic, row, col){
if(row!=1 && (col!=1) && (pic[row-1, col-1]>0)){return(T)}
else if((row!=1) && pic[row-1, col]>0){return(T)}
else if((row!=1) && col!=ncol(pic) && pic[row-1, col+1]>0){return(T)}
else if(col!=1 && pic[row, col-1]>0){return(T)}
else if(col!=ncol(pic) && pic[row, col+1]>0){return(T)}
else if(row!=nrow(pic) && col!=1 && pic[row+1, col-1]>0){return(T)}
else if(row!=nrow(pic) && pic[row+1, col]>0){return(T)}
else if(row!=nrow(pic) && col!=ncol(pic) && pic[row+1, col+1]>0){return(T)}
else{return(F)}
nrow(pic)
ncol(pic)
}
neighEleCheck<-function(pic, row, col){
if(row!=1 && (col!=1) && (pic[row-1, col-1]>0)){return(T)}
else if((row!=1) && pic[row-1, col]>0){return(T)}
else if((row!=1) && col!=ncol(pic) && pic[row-1, col+1]>0){return(T)}
else if(col!=1 && pic[row, col-1]>0){return(T)}
else if(col!=ncol(pic) && pic[row, col+1]>0){return(T)}
else if(row!=nrow(pic) && col!=1 && pic[row+1, col-1]>0){return(T)}
else if(row!=nrow(pic) && pic[row+1, col]>0){return(T)}
else if(row!=nrow(pic) && col!=ncol(pic) && pic[row+1, col+1]>0){return(T)}
else{return(F)}
}
neighEleCheck(torus.vics1.pic[1,1])
neighEleCheck(torus.vics1.pic, 1, 1)
torus.vics1.pic
neighEleCheck(torus.vics1.pic, 1, 2)
test.pic<-matrix(0, 5, 5)
test.pic
test.pic[2, 3]<-1
test.pic
neighEleCheck(test.pic, 1, 2)
neighEleCheck(test.pic, 4, 2)
neighEleCheck(test.pic, 4, 4)
neighEleCheck(test.pic, 1, 1)
neighEleCheck(test.pic, 1, 5)
neighEleCheck(test.pic, 2, 3)
neighEleCheck<-function(pic, row, col){
if(row!=1 && (col!=1) && (pic[row-1, col-1]>0)){return(T)}
else if((row!=1) && pic[row-1, col]>0){return(T)}
else if((row!=1) && col!=ncol(pic) && pic[row-1, col+1]>0){return(T)}
else if(col!=1 && pic[row, col-1]>0){return(T)}
else if(col!=ncol(pic) && pic[row, col+1]>0){return(T)}
else if(row!=nrow(pic) && col!=1 && pic[row+1, col-1]>0){return(T)}
else if(row!=nrow(pic) && pic[row+1, col]>0){return(T)}
else if(row!=nrow(pic) && col!=ncol(pic) && pic[row+1, col+1]>0){return(T)}
else{return(F)}
}
#注目要素に要素が無く、注目要素の8近傍に要素があるとき
#注目要素に2を代入
insertElement<-function(pic){
cp.pic<-pic
for (i in 1:nrow(pic)) {
for (j in 1:ncol(pic)) {
if(pic[i,j]==0 &&neighEleCheck(pic, i, j)){
cp.pic[i, j]<-2
}
}
}
return(cp.pic)
}
torus.vics1.cppic<-insertElement(torus.vics1.pic)
torus.vics1.cppic
torus.vics1.pic
which(torus.vics1.cppic==2)
which(torus.vics1.cppic==2, arr.ind=TRUE)
pcaCoord.set<-function(x, cppic, div){
xlim<-range(x[,1])
ylim<-range(x[,2])
wid<-abs(xlim[2]-xlim[1])/div
hei<-abs(ylim[2]-ylim[1])/div
ele<-which(cppic==2, arr.ind=TRUE)
coord<-sapply(1:nrow(ele), function(k)pcaCoordinate(xlim[1], ylim[1], wid, hei, ele[k,1], ele[k,2]))
return(coord)
}
pcaCoordinate<-function(xmin, ylim, wid, hei, row, col){
return(c(xmin+(wid*(col-1))+wid/2, ymin+(hei*(row-1))+row/2))
}
torus.vics1.incord<-pcaCoord.set(vics.pca[["x"]], torus.vics1.cppic, 4)
pcaCoordinate<-function(xmin, ymin, wid, hei, row, col){
return(c(xmin+(wid*(col-1))+wid/2, ymin+(hei*(row-1))+row/2))
}
torus.vics1.incord<-pcaCoord.set(vics.pca[["x"]], torus.vics1.cppic, 4)
torus.vics1.incord
t(torus.vics1.incord)
points(t(torus.vics1.incord))
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
gridLine(vics.pca[["x"]], 4)
pcaCoordinate<-function(xmin, ymin, wid, hei, row, col){
return(c(xmin+(wid*(col-1))+wid/2, ymin+(hei*(row-1))+hei/2))
}
pcaCoord.set<-function(x, cppic, div){
xlim<-range(x[,1])
ylim<-range(x[,2])
wid<-abs(xlim[2]-xlim[1])/div
hei<-abs(ylim[2]-ylim[1])/div
ele<-which(cppic==2, arr.ind=TRUE)
coord<-sapply(1:nrow(ele), function(k)pcaCoordinate(xlim[1], ylim[1], wid, hei, ele[k,1], ele[k,2]))
return(coord)
}
torus.vics1.incord<-pcaCoord.set(vics.pca[["x"]], torus.vics1.cppic, 4)
torus.vics1.incord
t(torus.vics1.incord)
points(t(torus.vics1.incord), pch=16, col=3)
points(t(torus.vics1.incord), pch=16, col=4)
torus.vics1.incord<-pcaCoord.set(vics.pca[["x"]], torus.vics1.cppic, 4)
torus.vics1.incord
pcaCoord.set<-function(x, cppic, div){
xlim<-range(x[,1])
ylim<-range(x[,2])
wid<-abs(xlim[2]-xlim[1])/div
hei<-abs(ylim[2]-ylim[1])/div
ele<-which(cppic==2, arr.ind=TRUE)
coord<-sapply(1:nrow(ele), function(k)pcaCoordinate(xlim[1], ylim[1], wid, hei, ele[k,1], ele[k,2]))
return(t(coord))
}
torus.vics1.incord<-pcaCoord.set(vics.pca[["x"]], torus.vics1.cppic, 4)
torus.vics1.incord
points(torus.vics1.incord, pch=16, col=2)
#PCA適用後の座標から元座標を算出
originCoodinate<-function(rpca, incord){
eigen01<-as.matrix(rpca$rotation[,1])
eigen02<-as.matrix(rpca$rotation[,2])
oricord<-sapply(1:nrow(incord), function(l){
return((incord[l, 1]*(eigen01)+incord[l, 2]*(eigen02))+rpca$center)
})
return(oricord)
}
torus.vics1.oricord<-originCoodinate(vics.pca, torus.vics1.incord)
torus.vics1.oricord
t(torus.vics1.oricord)
#PCA適用後の座標から元座標を算出
originCoodinate<-function(rpca, incord){
eigen01<-as.matrix(rpca$rotation[,1])
eigen02<-as.matrix(rpca$rotation[,2])
oricord<-sapply(1:nrow(incord), function(l){
return((incord[l, 1]*(eigen01)+incord[l, 2]*(eigen02))+rpca$center)
})
return(t(oricord))
}
torus.vics1.oricord<-originCoodinate(vics.pca, torus.vics1.incord)
torus.vics1.oricord
points3d(torus.vics1.oricord)
figurePlot.coloredVic(torus.300, torus.vic1, 1)
points3d(torus.vics1.oricord, col=2)
#データ点2の近傍で実験
torus.vic2<-get.vicinity(torus.dist, 2, 15)
figurePlot.coloredVic(torus.300, torus.vic1, 2)
figurePlot.coloredVic(torus.300, torus.vic1, 1)
#データ点2の近傍で実験
torus.vic2<-get.vicinity(torus.dist, 2, 15)
figurePlot.coloredVic(torus.300, torus.vic1, 2)
torus.300
#データ点17の近傍で実験
torus.vic17<-get.vicinity(torus.dist, 17, 15)
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
torus.vic17.line<-line.vics(centr =17, torus.vic17)
vic17s.pca<-prcomp(torus.300[torus.vic17.line,])
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
gridLine(vic17s.pca[["x"]], 4)
torus.vic17s.pic<-pixelConvert(vic17s.pca[["x"]], 4)
torus.vic17s.cppic<-insertElement(torus.vic17s.pic)
torus.vic17s.incord<-pcaCoord.set(vic17s.pca[["x"]], torus.vic17s.cppic, 4)
points(torus.vic17s.incord, col=2, pch=16)
torus.vic17s.oricord<-originCoodinate(vic17s.pca, torus.vic17s.incord)
points3d(torus.vic17s.oricord, col=2)
torus.vic17
torus.vic210<-get.vicinity(torus.dist, 210, 15)
torus.vic210
torus.vic1
torus.vic210.line<-line.vics(210, torus.vic210)
torus.vic210.lin
torus.vic210.line
torus.vic1.line
torus.vic210.line[-1 & -15]
torus.vic210.line[-1]
torus.vic210.line[-1][-15]
#任意の点に近傍点の中から最も遠い点を抽出
#そのもっとも遠い点から近傍の中で最も近いn点を抽出
coveredVic<-function(vicsline, dist, n){
choice<-rbind(dist[which(dist[, "start"]==vicsline[length(vicsline)]) & which(dist[, "goal"]==vicsline[-1][-length(vicsline)]), ],
dist[which(dist[, "goal"]==vicsline[length(vicsline)]) & which(dist[, "start"]==vicsline[-1][-length(vicsline)]), ])
choice<-choice[order(choice[,3]),]
covic<-choice[1:n,]
return(covic)
}
torus.covic210<-coveredVic(torus.vic210.line, torus.dist, 5)
#任意の点に近傍点の中から最も遠い点を抽出
#そのもっとも遠い点から近傍の中で最も近いn点を抽出
coveredVic<-function(vicsline, figure){
distfarvic<-sapply(1:(length(vicsline)-2), function(k){
return(sum((figure[vicsline[k+1],]-figure[vicline[length(vicline)],])^2))
})
return(distfarvic)
}
torus.covic210<-coveredVic(torus.vic210.line, torus.dist, 5)
torus.covic210<-coveredVic(torus.vic210.line, torus.dist)
torus.covic210<-coveredVic(torus.vic210.line, torus.300)
torus.covic210<-coveredVic(torus.vic210.line, torus.300)
#任意の点に近傍点の中から最も遠い点を抽出
#そのもっとも遠い点から近傍の中で最も近いn点を抽出
coveredVic<-function(vicsline, figure){
distfarvic<-sapply(1:(length(vicsline)-2), function(k){
return(sum((figure[vicsline[k+1],]-figure[vicsline[length(vicsline)],])^2))
})
return(distfarvic)
}
torus.covic210<-coveredVic(torus.vic210.line, torus.300)
torus.covic210
#任意の点に近傍点の中から最も遠い点を抽出
#そのもっとも遠い点から近傍の中で最も近いn点を抽出
coveredVic<-function(vicsline, figure){
distfarvic<-sapply(1:(length(vicsline)-2), function(k){
dist.set<-c(vicsline[length(vicsline)], vicsline[k+1], sum((figure[vicsline[k+1],]-figure[vicsline[length(vicsline)],])^2))
names(dist.set)<-c("start", "goal", "distance")
return(dist.set)
})
return(distfarvic)
}
torus.covic210<-coveredVic(torus.vic210.line, torus.300)
torus.covic210
t(torus.covic210)
torus.vic210.line
length(torus.vic210.line[-1][-15])
length(torus.vic210.line)
#任意の点に近傍点の中から最も遠い点を抽出
#そのもっとも遠い点から近傍の中で最も近いn点を抽出
coveredVic<-function(vicsline, figure, n){
distfarvic<-sapply(1:(length(vicsline)-2), function(k){
dist.set<-c(vicsline[length(vicsline)], vicsline[k+1], sum((figure[vicsline[k+1],]-figure[vicsline[length(vicsline)],])^2))
names(dist.set)<-c("start", "goal", "distance")
return(dist.set)
})
distfarvic<-t(distfarvic)
distfarvic<-distfarvic[order(distfarvic[,3]),]
return(distfarvic[1:n,])
}
torus.covic210<-coveredVic(torus.vic210.line, torus.300, 5)
torus.covic210
View(torus.dist)
torus.dist[-which(torus.dist[,1]==torus.covic210[,2])]
exami<-torus.dist[-which(torus.dist[,1]==torus.covic210[,2]),]
View(exami)
exami<-torus.dist[-which(torus.dist[,2]==torus.covic210[,2]),]
which(torus.dist[,2]==torus.covic210[,2])
which(torus.dist[,2]==torus.covic210[,2], arr.ind=TRUE)
exami<-torus.dist[-which(torus.dist[,2]==torus.covic210[,2]),]
View(exami)
torus.covic210[,2]
exami<-torus.dist[-torus.dist[,2]==torus.covic210[,2]),]
exami<-torus.dist[-torus.dist[,2]==torus.covic210[,2],]
View(exami)
exami<-torus.dist[-torus.dist[,2]==torus.covic210[1,2],]
exami<-torus.dist[torus.dist[,2]==torus.covic210[1,2],]
View(exami)
exami<-torus.dist[-torus.dist[,2]==torus.covic210[1,2],]
exami<-torus.dist[-which(torus.dist[,2]==torus.covic210[1,2]),]
exami<-torus.dist[-which(torus.dist[,2]==torus.covic210[5,2]),]
View(exami)
exami<-torus.dist[-which(torus.dist[,2]==torus.covic210[,2]),]
View(exami)
remove(exami)
torus.dist[which(torus.dist[,2]==torus.covic210[,2]),]
torus.covic210[,2]
#指定されたデータ点のnvics点近傍をPCAで変換し
#膨張処理を行い、補間されたデータ点の下の座標系での座標を返す
expandProcess<-function(centr, nvics, figure, dist, div){
vics<-get.vicinity(torus.dist, centr, nvics)
vics.line<-line.vics(centr, vics)
vics.pca<-prcomp(figure[vics.line,])
vics.pic<-pixelConvert(vics.pca[["x"]], div)
vics.cppic<-insertElement(vics.pic)
vics.incord<-pcaCoord.set(vics.pca[["x"]], vics.cppic, div)
vics.oricord<-originCoodinate(vics.pca, vics.incord)
return(vics.oricord)
}
torus.vic100s.oricord<-expandProcess(100, 15, torus.300, torus.dist, 4)
torus.vic100s.oricord
torus.vic100s<-get.vicinity(torus.dist, 100, 15)
figurePlot.coloredVic(torus.300, torus.vic100s, centr =100)
figurePlot.coloredVic(torus.300, torus.vic100s, centr =100)
points3d(torus.vic100s.oricord, col=2)
torus.vic100s.line<-line.vics(centr =100, torus.vic100s)
vic100s.pca<-prcomp(torus.300[torus.vic100s.line,])
plot(vic100s.pca[["x"]][,1], vic100s.pca[["x"]][,2], col=3, pch=16)
gridLine(vic100s.pca[["x"]], 4)
torus.vic100s.pic<-pixelConvert(vic100s.pca[["x"]], 4)
torus.vic100s.cppic<-insertElement(torus.vic100s.pic)
torus.vic100s.incord<-pcaCoord.set(vic100s.pca[["x"]], torus.vic100s.cppic, 4)
points(torus.vic100s.incord, col=2, pch=16)
rep(0, length = 20
)
#指定されたデータ点のnvics点近傍をPCAで変換し
#膨張処理を行い、補間されたデータ点の下\元の座標系での座標を返す
expandProcess<-function(centr, nvics, figure, dist, div){
vics<-get.vicinity(dist, centr, nvics)
vics.line<-line.vics(centr, vics)
vics.pca<-prcomp(figure[vics.line,])
vics.pic<-pixelConvert(vics.pca[["x"]], div)
vics.cppic<-insertElement(vics.pic)
vics.incord<-pcaCoord.set(vics.pca[["x"]], vics.cppic, div)
vics.oricord<-originCoodinate(vics.pca, vics.incord)
return(vics.oricord)
}
#指定されたデータ点のnvics点近傍をPCAで変換し
#膨張処理を行い、補間されたデータ点の下\元の座標系での座標を返す
expandProcess<-function(vics, vics.line, figure, dist, div){
vics.pca<-prcomp(figure[vics.line,])
vics.pic<-pixelConvert(vics.pca[["x"]], div)
vics.cppic<-insertElement(vics.pic)
vics.incord<-pcaCoord.set(vics.pca[["x"]], vics.cppic, div)
vics.oricord<-originCoodinate(vics.pca, vics.incord)
return(vics.oricord)
}
#指定されたデータ点のnvics点近傍をPCAで変換し
#膨張処理を行い、補間されたデータ点の下\元の座標系での座標を返す
expandProcess<-function(vics, vics.line, figure, dist, div){
vics.pca<-prcomp(figure[vics.line,])
vics.pic<-pixelConvert(vics.pca[["x"]], div)
vics.cppic<-insertElement(vics.pic)
vics.incord<-pcaCoord.set(vics.pca[["x"]], vics.cppic, div)
vics.oricord<-originCoodinate(vics.pca, vics.incord)
return(vics.oricord)
}
torus.vic100s.oricord<-expandProcess(torus.vic100s, torus.vic100s.line, torus.300, torus.dist, 4)
figurePlot.coloredVic(torus.300, torus.vic100s, centr =100)
points3d(torus.vic100s.oricord, col=2)
torus.vic100s.oricord
interPolation_test<-function(figure, nvics, div){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-expandProcess(vics, vics.line, figure, dist, div)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
return(oricord)
}
#データ補間テスト
inter.oricord<-interPolation_test(torus.300, 15, 4)
inter.oricord
figurePlot(torus.300)
figurePlot(torus.300)
points3d(inter.oricord, col=2)
interPolation_test<-function(figure, nvics, div){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-expandProcess(vics, vics.line, figure, dist, div)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
debugText(element)
return(oricord)
}
#データ補間テスト
inter.oricord<-interPolation_test(torus.300, 15, 4)
figurePlot(torus.300)
require(TDA)
require(myfs)
require(rgl)
points3d(inter.oricord, col=2)
figurePlot(torus.300)
points3d(inter.oricord, col="orange")
sphere<-sphereUnif(200, 2, 1)
plot3d(sphere)
sphere.inoricord<-interPolation_test(sphere, 10, 3)
interPolation_test<-function(figure, nvics, div){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-expandProcess(vics, vics.line, figure, dist, div)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
points3d(sphere.inoricord, col="orange")
sphere.inoricord<-interPolation_test(sphere, 15, 4)
plot3d(sphere)
points3d(sphere.inoricord, col="orange")
sphere.inoricord2<-interPolation_test(sphere, 10, 3)
torus.320<-torusUnif(320, 1, 2.5)
figurePlot(torus.320)
torus320.dist<-distance(torus.320)
torus320.vic20s<-get.vicinity(torus320.dist)
torus320.vic20s<-get.vicinity(torus320.dist, center = 20, nvic = 20)
torus320.vic20s.line<-line.vics(20, torus320.vic20s)
figurePlot.coloredVic(torus.320, torus320.vic20s, 20)
figurePlot(torus.320[-torus320.vic20s.line, ])
figurePlot.coloredVic(torus.320, torus320.vic20s, 20)
figurePlot(torus.320[-torus320.vic20s.line, ])
torus320.no20<-torus.320[-torus320.vic20s.line, ]
torus320.no20.incord<-interPolation_test(torus320.no20, 15, 4)
figurePlot(torus.320[-torus320.vic20s.line, ])
points3d(torus320.no20.incord, col="orange")
figurePlot.coloredVic(torus.300, torus.vic1, 1)
rgl.snapshot("./data/torus_300.png")
rgl.snapshot("./torus_300.png")
rgl.snapshot("./data/torus_300.png")
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
gridLine(vics.pca[["x"]], 4)
figurePlot(torus.300)
rgl.snapshot("./data/torus_300_1.png")
source('~/R/interpolation_test/interpo_func.R', encoding = 'UTF-8')
figurePlot.coloredVic(torus.300, torus.vic1, 1)
torus.vic1.line
points(torus.vics1.incord, pch=16)
points(torus.vics1.incord, pch=16, col=2)
points3d(torus.vics1.oricord, col=2)
rgl.snapshot("./data/torus_300_intered.png")
figurePlot(torus.300)
points3d(inter.oricord, col="orange")
rgl.snapshot("./data/torus_300_intered_fin.png")
inter.oricord20<-interPolation_test(torus.300, 20, 4)
figurePlot(torus.300)
points3d(inter.oricord20, col="orange")
meanVicsDestance<-function(figure, nvics, div){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
if(i==1){vics<-get.vicinity(dist, i, nvics)[, "distance"]}
else{vics<-c(vics, get.vicinity(dist, i, nvics)[, "distance"])}
element[vics.line]<-element[vics.line]+1
}
}
#debugText(element)
return(mean(vics))
}
require(TDA)
require(myfs)
require(rgl)
#サイクル/ノイズ判別閾値テスト
sphere.400<-sphereUnif(400, 2, 1)
plot3d(sphere.400)
meanVicsDestance<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
if(i==1){vics<-get.vicinity(dist, i, nvics)[, "distance"]}
else{vics<-c(vics, get.vicinity(dist, i, nvics)[, "distance"])}
element[vics.line]<-element[vics.line]+1
}
}
#debugText(element)
return(mean(vics))
}
pre_thresh<-meanVicsDestance(sphere.400, 15)
meanVicsDestance<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
if(i==1){vics<-get.vicinity(dist, i, nvics)[, "distance"]}
else{vics<-c(vics, get.vicinity(dist, i, nvics)[, "distance"])}
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
}
}
#debugText(element)
return(mean(vics))
}
pre_thresh<-meanVicsDestance(sphere.400, 15)
meanVicsDestance<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
if(i==1){vics.dist<-vics[, "distance"]}
else{vics.dist<-c(vics.dist, vics[, "distance"])}
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
}
}
#debugText(element)
return(mean(vics.dist))
}
pre_thresh<-meanVicsDestance(sphere.400, 15)
pre_thresh
pre_thresh/4
