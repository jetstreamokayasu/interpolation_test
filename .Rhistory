return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
ncross1
hline<-matrix(c(ranx, rany, max(tiles[[1]][["x"]][which(tiles[[1]][["x"]]>=ranx)]), rany), 2, 2, byrow=T)
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
ncross1
hline
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
#ncross<-length(which((t1*t2)<0))
ncross<-t1*t2
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
#ncross<-length(which((t1*t2)<0))
ncross<-t1*t2
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
hline
hline[1,1]-hline[2,1]
tiles[[1]][["y"]][4]-hline[1,2]
tiles[[1]][["y"]][1]-hline[1,2]
tiles[[1]][["y"]][2]-hline[1,2]
tiles[[1]][["y"]][3]-hline[1,2]
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
debugText(t1, t2)
#ncross<-length(which((t1*t2)<0))
ncross<-t1*t2
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
t(cross1.side)
hline
hline[1,]<0
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[2,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[2,1]))
})
debugText(t1, t2, t3, t4)
#ncross<-length(which((t1*t2)<0))
ncross<-is.element((t1*t2)<0, (t3*t4)<0)
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t4<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[2,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[2,1]))
})
debugText(t1, t2, t3, t4)
#ncross<-length(which((t1*t2)<0))
ncross<-is.element((t1*t2)<0, (t3*t4)<0)
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
ncross1
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t4<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[2,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[2,1]))
})
debugText(t1, t2, t3, t4)
debugText((t1*t2)<0)
debugText((t3*t4)<0)
#ncross<-length(which((t1*t2)<0))
ncross<-is.element((t1*t2)<0, (t3*t4)<0)
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t4<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[2,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[2,1]))
})
debugText(t1, t2, t3, t4)
debugText((t1*t2)<0)
debugText((t3*t4)<0)
#ncross<-length(which((t1*t2)<0))
ncross<-((t1*t2)<0 & (t3*t4)<0)
return(ncross)
}
ncross1<-crossCheck(tiles[[1]], hline, t(cross1.side))
ncross1
which(ncross1==T)
#あるボロノイ領域内にランダムに点を打つ
randomPointVoronoi<-function(tile){
inter<-F
while (inter==F) {
ranx<-runif(1, range(tile[["x"]]))
rany<-runif(1, range(tile[["y"]]))
cross.mem<-which(tile[["x"]]>=ranx)
sides<-sapply(cross.mem, function(k)vertex.side(tile, k))
if(length(sides)<1){next}
check.side<-sidesSet(sides)
hline<-matrix(c(ranx, rany, max(tile[["x"]][which(tile[["x"]]>=ranx)]), rany), 2, 2, byrow=T)
ncross<-crossCheck(tile, hline, t(check.side))
if(length(which(ncross==T)) %% 2 != 0){inter=T}
}
return(c(ranx, rany))
}
ranpoint1<-randomPointVoronoi(tiles[[1]])
ranpoint1
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
points(vics.pca[["x"]][1,1], vics.pca[["x"]][1,2], col=2, pch=16)
points(ranpoint1, pch=13, col=4)
points(ranpoint1[1], ranpoint1[2], pch=13, col=4)
crossCheck<-function(tile, hline, sides){
t1<-sapply(sides[,1], function(side){
#debugText(side)
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t2<-sapply(sides[,2], function(side){
#cat("t2_side=", side, "\n")
return((hline[1,1]-hline[2,1])*(tile[["y"]][side]-hline[1,2]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t3<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[1,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[1,1]))
})
t4<-sapply(1:nrow(sides), function(k){
return((tile[["x"]][sides[k,1]]-tile[["x"]][sides[k,2]])*(hline[2,2]-tile[["y"]][sides[k,1]])+(tile[["y"]][sides[k,1]]-tile[["y"]][sides[k,2]])*(tile[["x"]][sides[k,1]]-hline[2,1]))
})
# debugText(t1, t2, t3, t4)
# debugText((t1*t2)<0)
# debugText((t3*t4)<0)
#ncross<-length(which((t1*t2)<0))
ncross<-((t1*t2)<0 & (t3*t4)<0)
return(ncross)
}
#隣接するボロノイ領域を探す
neighbourVoronoi<-function(tiles, centr){
neibor<-sapply(1:length(tiles), function(k){
if(k!=centr && any(tiles[[centr]][["x"]] %in% tiles[[k]][["x"]]))
return(k)
})
}
neibor1<-neighbourVoronoi(tiles, 1)
neibor1
#隣接するボロノイ領域を探す
neighbourVoronoi<-function(tiles, centr){
neibor<-sapply(1:length(tiles), function(k){
if(k!=centr && any(tiles[[centr]][["x"]] %in% tiles[[k]][["x"]]))
return(k)
})
for (i in length(neibor)) {
if(is.null(neibor[[i]])){neibor[i]<-NULL}
}
return(unlist(neibor))
}
neibor1<-neighbourVoronoi(tiles, 1)
neibor1
points(vics.pca[["x"]][2,1], vics.pca[["x"]][2,2], col=2, pch=17)
points(vics.pca[["x"]][3,1], vics.pca[["x"]][3,2], col=2, pch=17)
points(vics.pca[["x"]][4,1], vics.pca[["x"]][4,2], col=2, pch=17)
points(vics.pca[["x"]][7,1], vics.pca[["x"]][7,2], col=2, pch=17)
ranpoint2<-randomPointVoronoi(tiles[[2]])
points(ranpoint2[1], ranpoint2[2], pch=13, col=4)
ranpoint3<-randomPointVoronoi(tiles[[3]])
points(ranpoint3[1], ranpoint3[2], pch=13, col=4)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics, vics.line, figure, dist, div){
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
for (i in length(neibor1)) {
ranpoint<-randomPointVoronoi(tiles[[1]])
if(i==1){incord<-ranpoint}
else{incord<-rbind(incord, ranpoint)}
}
vics.oricord<-originCoodinate(vics.pca, incord)
return(vics.oricord)
}
figurePlot.coloredVic(torus.300, torus.vic1, 1)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
for (i in length(neibor1)) {
ranpoint<-randomPointVoronoi(tiles[[1]])
if(i==1){incord<-ranpoint}
else{incord<-rbind(incord, ranpoint)}
}
vics.oricord<-originCoodinate(vics.pca, incord)
return(vics.oricord)
}
voron.oricord<-voronoiProcess(torus.vic1.line, torus.300)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
for (i in length(neibor1)) {
ranpoint<-randomPointVoronoi(tiles[[1]])
if(i==1){incord<-ranpoint}
else{incord<-rbind(incord, ranpoint)}
}
vics.oricord<-originCoodinate(vics.pca, incord)
return(vics.oricord)
}
voron.oricord<-voronoiProcess(torus.vic1.line, torus.300)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
for (i in length(neibor1)) {
ranpoint<-randomPointVoronoi(tiles[[i]])
if(i==1){incord<-ranpoint}
else{incord<-rbind(incord, ranpoint)}
}
vics.oricord<-originCoodinate(vics.pca, incord)
return(vics.oricord)
}
voron.oricord<-voronoiProcess(torus.vic1.line, torus.300)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
for (i in 1:length(neibor1)) {
ranpoint<-randomPointVoronoi(tiles[[i]])
if(i==1){incord<-ranpoint}
else{incord<-rbind(incord, ranpoint)}
}
vics.oricord<-originCoodinate(vics.pca, incord)
return(vics.oricord)
}
voron.oricord<-voronoiProcess(torus.vic1.line, torus.300)
voron.oricord
points3d(voron.oricord, col=2)
voronoiInterpo<-function(figure, nvics, div){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-voronoiProcess(vics.line, figure)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
voronoiInterpo<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-voronoiProcess(vics.line, figure)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
in.oricord.vo<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo, col=2)
in.oricord.vo<-voronoiInterpo(torus.300, 15)
figurePlot(torus.300)
points3d(in.oricord.vo, col=2)
in.oricord.vo<-voronoiInterpo(torus.300, 10)
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo, col=2)
#データ点17の近傍で実験
torus.vic17<-get.vicinity(torus.dist, 17, 15)
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
torus.vic17.line<-line.vics(centr =17, torus.vic17)
vic17s.pca<-prcomp(torus.300[torus.vic17.line,])
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
tile17s <- tile.list(res17)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res17$n.data){	polygon(tiles17[[i]]) }
tile17s <- tile.list(res17)
for(i in 1:res17$n.data){	polygon(tiles17[[i]]) }
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
tile17s <- tile.list(res17)
for(i in 1:res17$n.data){	polygon(tiles17[[i]]) }
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
points(vic17s.pca[["x"]][1,1], vic17s.pca[["x"]][1,2], col=2, pch=16)
neibor17<-neighbourVoronoi(tile17s, 1)
neibor17
ranpoints17<-sapply(c(1,neibor17), function(k)randomPointVoronoi(tiles[[k]]))
ranpoints17
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[2,i], ranpoints17[2,i], pch=13, col=4)
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[2,i], ranpoints17[1,i], pch=13, col=4)
}
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
ranpoints17<-sapply(c(1,neibor17), function(k)randomPointVoronoi(tile17s[[k]]))
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
centerVoronoi<-function(tile){
cen.x<-mean(tile[["x"]])
cen.y<-mean(tile[["y"]])
return(c(cen.x, cen.y))
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
cenpoints17<-sapply(c(1,neibor17), function(k)centerVoronoi(tile17s[[k]]))
for(i in 1:(length(neibor17)+1)){
points(cenpoints17[1,i], cenpoints17[2,i], pch=13, col=4)
}
cenpoints17
t(cenpoints17)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
# for (i in neibor1) {
#
#   ranpoint<-randomPointVoronoi(tiles[[i]])
#
#   if(i==1){incord<-ranpoint}
#   else{incord<-rbind(incord, ranpoint)}
#
# }
cenpoints<-sapply(neibor1, function(k)centerVoronoi(tile1s[[k]]))
vics.oricord<-originCoodinate(vics.pca, t(cenpoints))
return(vics.oricord)
}
voronoiInterpo<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-voronoiProcess(vics.line, figure)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
torus.vic17.line<-line.vics(centr =17, torus.vic17)
voron17.oricord<-voronoiProcess(torus.vic17.line, torus.300)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
# for (i in neibor1) {
#
#   ranpoint<-randomPointVoronoi(tiles[[i]])
#
#   if(i==1){incord<-ranpoint}
#   else{incord<-rbind(incord, ranpoint)}
#
# }
cenpoints<-sapply(neibor1, function(k)centerVoronoi(tiles[[k]]))
vics.oricord<-originCoodinate(vics.pca, t(cenpoints))
return(vics.oricord)
}
voron17.oricord<-voronoiProcess(torus.vic17.line, torus.300)
points3d(voron17.oricord, col=2)
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo, col=2)
figurePlot(torus.300)
points3d(in.oricord.vo, col=2)
