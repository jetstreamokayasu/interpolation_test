points(ranpoints17[2,i], ranpoints17[1,i], pch=13, col=4)
}
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
ranpoints17<-sapply(c(1,neibor17), function(k)randomPointVoronoi(tile17s[[k]]))
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
for(i in 1:(length(neibor17)+1)){
points(ranpoints17[1,i], ranpoints17[2,i], pch=13, col=4)
}
centerVoronoi<-function(tile){
cen.x<-mean(tile[["x"]])
cen.y<-mean(tile[["y"]])
return(c(cen.x, cen.y))
}
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
cenpoints17<-sapply(c(1,neibor17), function(k)centerVoronoi(tile17s[[k]]))
for(i in 1:(length(neibor17)+1)){
points(cenpoints17[1,i], cenpoints17[2,i], pch=13, col=4)
}
cenpoints17
t(cenpoints17)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
# for (i in neibor1) {
#
#   ranpoint<-randomPointVoronoi(tiles[[i]])
#
#   if(i==1){incord<-ranpoint}
#   else{incord<-rbind(incord, ranpoint)}
#
# }
cenpoints<-sapply(neibor1, function(k)centerVoronoi(tile1s[[k]]))
vics.oricord<-originCoodinate(vics.pca, t(cenpoints))
return(vics.oricord)
}
voronoiInterpo<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
vics.oricord<-voronoiProcess(vics.line, figure)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
torus.vic17.line<-line.vics(centr =17, torus.vic17)
voron17.oricord<-voronoiProcess(torus.vic17.line, torus.300)
#指定されたデータ点のnvics点近傍をPCAで変換し
#ボロノイ図を描き、中心点のボロノイ領域
#及び隣接するボロノイ領域内にランダムに点を打ち補間
voronoiProcess<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
neibor1<-neighbourVoronoi(tiles, 1)
neibor1<-c(1, neibor1)
# for (i in neibor1) {
#
#   ranpoint<-randomPointVoronoi(tiles[[i]])
#
#   if(i==1){incord<-ranpoint}
#   else{incord<-rbind(incord, ranpoint)}
#
# }
cenpoints<-sapply(neibor1, function(k)centerVoronoi(tiles[[k]]))
vics.oricord<-originCoodinate(vics.pca, t(cenpoints))
return(vics.oricord)
}
voron17.oricord<-voronoiProcess(torus.vic17.line, torus.300)
points3d(voron17.oricord, col=2)
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo, col=2)
figurePlot(torus.300)
points3d(in.oricord.vo, col=2)
library("lle", lib.loc="~/R/win-library/3.4")
View(torus.300)
#LLEを使ってみる
kneibor<-calc_k(torus.300, 2)
kneibor
torus300.vic1<-get.vicinity(torus.300.dist, 1, 10)
torus.300.dist<-distance(torus.300)
torus300.vic1<-get.vicinity(torus.300.dist, 1, 10)
torus300.vic1s<-lle(torus.vic1, 2, 10)
torus300.vic1s
vic1s.line<-line.vics(1, torus300.vic1)
torus300.vic1s<-lle(torus.300[vic1s.line, ], 2, 10)
torus300.vic1s
plot(torus300.vic1s)
View(torus300.vic1s)
plot(torus300.vic1s[["Y"]])
figurePlot.coloredVic(torus.300, torus300.vic1, 1)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
voron.oricord<-voronoiProcess(torus.vic1.line, torus.300)
points3d(voron.oricord, col=2)
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo, col=2)
neibor1<-neighbourVoronoi(tiles, 1)
cenpoint1s<-sapply(neibor1, function(k)centerVoronoi(tiles[[k]]))
cenpoint1s
t(cenpoint1s)
cenpoint1s<-t(apply(neibor1, function(k)centerVoronoi(tiles[[k]])))
cenpoint1s<-t(sapply(neibor1, function(k)centerVoronoi(tiles[[k]])))
cenpoint1s
points(cenpoint1s[1], cenpoint1s[2], pch=13, col=4)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
points(ranpoint1[,1], ranpoint1[,2], pch=13, col=4)
points(cenpoint1s[,1], cenpoint1s[,2], pch=13, col=4)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
cenpoint1s<-t(sapply(c(1,neibor1), function(k)centerVoronoi(tiles[[k]])))
points(cenpoint1s[,1], cenpoint1s[,2], pch=13, col=4)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
figurePlot(torus.300)
figurePlot.coloredVic(torus.300, torus.vic1, 1)
rgl.snapshot("./data/torus_300_1.png")
points3d(voron.oricord, col=2)
rgl.snapshot("./data/torus_300_intered_voro.png")
figurePlot(torus.300)
points3d(in.oricord.vo, col=2)
rgl.snapshot("./data/torus_300_intered_all.png")
points(cenpoint1s[,1], cenpoint1s[,2], pch=16, col=2)
figurePlot(torus.300)
rgl.snapshot("./data/torus_300_0.png")
points3d(in.oricord.vo, col=2)
rgl.snapshot("./data/torus_300_intered_all.png")
require(TDA)
require(myfs)
require(rgl)
torus500<-torusUnif(500, 1, 2.5)
figurePlot(torus.300)
figurePlot(torus.500)
torus500<-torusUnif(500, 1, 2.5)
torus500<-torusUnif(500, 1, 2.5)
figurePlot(torus.500)
figurePlot(torus500)
torus200<-torusUnif(200, 1, 2.5)
figurePlot(torus200)
sucrate.temp<-list(data500=c(0.91, 0.89, 0.9, 0.97, 0.88),
data450=c(0.9, 0.89, 0.86, 0.93, 0.91),
data400=c(0.9, 0.89, 0.86, 0.93, 0.87),
data350=c(0.8, 0.85, 0.86, 0.9, 0.84),
data300=c(0.3, 0.2, 0.17, 0.34, 0.27),
data250=c(0.15, 0.12, 0.17, 0.13, 0.16),
data200=c(0.07, 0.09, 0.1, 0, 0.01))
sucrate.temp
attributes(sucrate.temp)
boxplot(sucrate.temp)
sucrate.temp<-list(data200=c(0.07, 0.09, 0.1, 0, 0.01),
data250=c(0.15, 0.12, 0.17, 0.13, 0.16),
data300=c(0.3, 0.2, 0.17, 0.34, 0.27),
data350=c(0.8, 0.85, 0.86, 0.9, 0.84),
data400=c(0.9, 0.89, 0.86, 0.93, 0.87),
data450=c(0.9, 0.89, 0.86, 0.93, 0.91),
data500=c(0.91, 0.89, 0.9, 0.97, 0.88))                   )
sucrate.temp<-list(data200=c(0.07, 0.09, 0.1, 0, 0.01),
data250=c(0.15, 0.12, 0.17, 0.13, 0.16),
data300=c(0.3, 0.2, 0.17, 0.34, 0.27),
data350=c(0.8, 0.85, 0.86, 0.9, 0.84),
data400=c(0.9, 0.89, 0.86, 0.93, 0.87),
data450=c(0.9, 0.89, 0.86, 0.93, 0.91),
data500=c(0.91, 0.89, 0.9, 0.97, 0.88))                   )
sucrate.temp<-list(data200=c(0.07, 0.09, 0.1, 0, 0.01),
data250=c(0.15, 0.12, 0.17, 0.13, 0.16),
data300=c(0.3, 0.2, 0.17, 0.34, 0.27),
data350=c(0.8, 0.85, 0.86, 0.9, 0.84),
data400=c(0.9, 0.89, 0.86, 0.93, 0.87),
data450=c(0.9, 0.89, 0.86, 0.93, 0.91),
data500=c(0.91, 0.89, 0.9, 0.97, 0.88))
boxplot(sucrate.temp)
boxplot(sucrate.temp, names=seq(200, 500, by=50))
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
suctemp.mean<-sapply(sucrate.temp, function(rate)mean(rate))
suctemp.mean
lines(seq(200, 500, by=50), suctemp.mean)
plot(seq(200, 500, by=50), suctemp.mean)
plot(seq(200, 500, by=50), suctemp.mean, type = "l")
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
lines(seq(200, 500, by=50), suctemp.mean)
par("new")
par(new)
par(new=T)
plot(seq(200, 500, by=50), suctemp.mean, type = "l")
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
suctemean.smoth<-smooth.spline(seq(200, 500, by=50), suctemp.mean)
line(seq(200, 500, by=50), suctemean.smoth)
suctemean.smoth
suctemean.smoth
suctemean.smoth
View(suctemean.smoth)
suctemean.smoth[["x"]]
suctemean.smoth[["y"]]
suctemean.smoth$x
line(suctemean.smoth$x, suctemean.smoth$y)
lines(suctemean.smoth$x, suctemean.smoth$y)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l")
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
par(new=T)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate", add=T)
lines(suctemean.smoth$x, suctemean.smoth$y)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate", add=T)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "n",ann = F)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate", add=T)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate", add=T)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F, add=T)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
sucrate.temp<-list(data200=c(0.07, 0.09, 0.1, 0, 0.01),
data250=c(0.15, 0.12, 0.17, 0.13, 0.16),
data300=c(0.3, 0.2, 0.17, 0.34, 0.27),
data350=c(0.8, 0.85, 0.86, 0.9, 0.84),
data400=c(0.9, 0.89, 0.86, 0.93, 0.87),
data450=c(0.9, 0.89, 0.86, 0.93, 0.91),
data500=c(0.91, 0.89, 0.9, 0.97, 0.88))
sucrate.temp
library(tidyverse)
sucrate.temp %>% bind_cols()
sucrate.temp %>% bind_cols() %>% gather(data, value)
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value))
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin() + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin() + geom_point() + geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin() + geom_point() + geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin() + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value)
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data))
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data)) %>% ggplot(aes(data, value)) %>% geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data)) %>% ggplot(aes(data, value)) + geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth() + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data.id = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth(aes(x = data.id)) + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data.id = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth(aes(x = data.id)) + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data.id = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth(aes(x = data.id)) + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth() + geom_point()
require(TDA)
require(myfs)
require(rgl)
library("phacm", lib.loc="~/R/win-library/3.4")
require(TDA)
require(myfs)
require(rgl)
anu<-anulusUnif(100, 1, 1.5)
plot3d(anu)
anu2<-anulusUnif(100)
anu2
plot(anu2)
anu
plot(anu)
anu.diag<-compute_pd(anu)
anu.diag<-compute_pd(anu, 1, 2)
anu.diag
plot(anu.diag)
autoplot(anu.diag)
View(anu.diag)
anu.pl<-compute_pl(anu.diag)
autoplot(anu.pl)
print(anu.pl)
print(anu.diag)
anu.diag$dim
anu.pl$value
anu.pl$tseq
anu.pl$dim
anu.smpl<-compute_smooth_pl(anu.pl)
autoplot(anu.smpl)
autoplot(anu.smpl, dimension = 1)
sphe<-sphereUnif(100, 1)
sphe
sphe<-sphereUnif(100, 2, 1)
figurePlot(sphe)
last_pd()
sphe.diag<-compute_pd(sphe, 2, 1)
autoplot(sphe.diag)
sphe.diag<-compute_pd(sphe, 2, 1.5)
autoplot(sphe.diag)
sphe.diag<-compute_pd(sphe, 2, 2)
autoplot(sphe.diag)
sphe.pl<-compute_pl(sphe.diag)
autoplot(sphe.pl)
sphe.smpl<-compute_smooth_pl(sphe.pl)
autoplot(sphe.smpl)
autoplot(sphe.smpl, dimension = 1)
local.max<-count_local_maximal(sphe.pl)
local.max<-count_local_maximal(sphe.pl, 0.1)
local.max
help(count_smooth_maximal)
losm.ma<-count_smooth_maximal(sphe.pl)
losm.ma
help(count_smooth_maximal)
help(zero_threshold)
zero_threshold(sphe.diag)
library(tidyverse)
sphe.diag %>% filter(dim==1)
sphe.diag %>% filter(dim==1) %>% mutate(persis=death-birth)
sphe.diag %>% filter(dim==1) %>% mutate(persis=death-birth) %>% summarise()
hoge<-sphe.diag %>% filter(dim==1) %>% mutate(persis=death-birth)
hoge$persis %>% max()
losm.ma<-count_smooth_maximal(sphe.pl)
0.4527097/2
hoge %>% mutate(half=persis/2)
sphe.pl
updateR()
library(installr)
install.packages("installr")
library(installr)
updateR()
torus200<-torusUnif(200, 1, 2.5)
require(TDA)
require(myfs)
require(rgl)
install.packages("TDA")
install.packages("rgl")
install.packages("devtools")
devtools::install_github("hosscine/phacm")
require(phacm)
install.packages("tidyverse")
require(phacm)
require(TDA)
require(myfs)
require(rgl)
torus200<-torusUnif(200, 1, 2.5)
figurePlot(torus200)
torus200.diaga<-compute_pd(torus200)
torus200.diaga<-compute_pd(torus200, maxdimension = 2, maxscale = 3)
autoplot(torus200.diaga)
torus200.pl<-compute_pl(torus200.diaga)
autoplot(torus200.pl)
trus200.smpl<-compute_smooth_pl(torus200.pl)
autoplot(trus200,smpl)
autoplot(trus200.smpl)
trus200.betti<-count_smooth_maximal(torus200.pl)
trus200.betti
torus200.in<-voronoiInterpo(figure = torus200, nvics = 15)
install.packages("deldir")
library(deldir)
torus200.in<-voronoiInterpo(figure = torus200, nvics = 15)
figurePlot(torus200)
plot3d(torus200.in, col="orange")
figurePlot(torus200)
plot3d(torus200.in, col="orange")
figurePlot(torus200)
points3d(torus200.in, col="orange")
plot(vic17s.pca[["x"]][,1], vic17s.pca[["x"]][,2], col=3, pch=16)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
require(deldir)
require(ggplot2)
require(plyr)
require(reshape2)
require(ggmap)
require(TDA)
require(myfs)
require(rgl)
res17<-deldir(vic17s.pca$x[,1], vic17s.pca$x[,2])
tile17s <- tile.list(res17)
for(i in 1:res17$n.data){	polygon(tile17s[[i]]) }
points(vic17s.pca[["x"]][1,1], vic17s.pca[["x"]][1,2], col=2, pch=16)
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
View(res17)
View(tile17s)
tile17s[[1]][["x"]]
tile17s[[1]][["y"]]
View(tile17s)
cbind(tile17s[[1]][["x"]], tile17s[[1]][["y"]])
<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
insecs<-cbind(tiles[[1]][["x"]], tiles[[1]][["y"]])
vics.oricord<-originCoodinate(vics.pca, insecs)
return(vics.oricord)
}
voronoiBorder<-function(vics.line, figure){
require(deldir)
vics.pca<-prcomp(figure[vics.line,])
res<-deldir(vics.pca$x[,1], vics.pca$x[,2])
tiles<-tile.list(res)
insecs<-cbind(tiles[[1]][["x"]], tiles[[1]][["y"]])
vics.oricord<-originCoodinate(vics.pca, insecs)
return(vics.oricord)
}
vic17s.oricord<-voronoiBorder(torus.vic17.line, torus.vic17)
torus.vic17.line
?prcomp
vic17s.oricord<-voronoiBorder(torus.vic17.line, torus.300)
vic17s.oricord
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
points3d(vic17s.oricord)
points3d(vic17s.oricord, col=2)
figurePlot.coloredVic(torus.300, torus.vic17, centr = 17)
points3d(vic17s.oricord, col=2)
points(tile17s[[1]][["x"]], tile17s[[1]][["y"]], col=3, pch=16)
points(tile17s[[1]][["x"]], tile17s[[1]][["y"]], col=4, pch=16)
voronoiInterpo<-function(figure, nvics){
element<-rep(0, length = nrow(figure))
dist<-distance(figure)
for (i in 1:nrow(figure)) {
if(element[i]==0){
vics<-get.vicinity(dist, i, nvics)
vics.line<-line.vics(i, vics)
element[vics.line]<-element[vics.line]+1
#vics.oricord<-voronoiProcess(vics.line, figure)
vics.oricord<-voronoiBorder(vics.line, figure)
if(i==1){oricord<-vics.oricord}
else{oricord<-rbind(oricord, vics.oricord)}
}
}
#debugText(element)
return(oricord)
}
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 15)
points3d(in.oricord.vo, col="orange")
figurePlot(torus.300)
in.oricord.vo10<-voronoiInterpo(torus.300, 10)
points3d(in.oricord.vo10, col="orange")
figurePlot(torus.300)
points3d(in.oricord.vo, col="orange")
sucrate.temp
sucrate.temp %>% bind_cols()
require(TDA)
require(myfs)
require(rgl)
require(deldir)
require(tidyverse)
sucrate.temp %>% bind_cols()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% ggplot(aes(data, value)) + geom_violin() + geom_point()
sucrate.temp %>% bind_cols() %>% gather(data, value) %>% mutate(data = as.factor(data) %>% as.numeric) %>% ggplot(aes(data, value)) + geom_smooth() + geom_point()
plot(seq(200, 500, by=50), suctemp.mean, type = "l")
lines(suctemean.smoth$x, suctemean.smoth$y)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
par(new=T)
lines(suctemean.smoth$x, suctemean.smoth$y)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "n",ann = F)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
par(new=T)
plot(suctemean.smoth$x, suctemean.smoth$y, type = "l",ann = F)
boxplot(sucrate.temp, names=seq(200, 500, by=50), xlab="Data Point", ylab="Success Rate")
lines(seq(200, 500, by=50), suctemp.mean)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, cex=2)
for(i in 1:res1$n.data){	polygon(tiles[[i]]) }
#text(d$longitude,d$latitude+0.0005,d$id,col=as.numeric(d$type)+1)
points(tiles[[1]][["x"]], tiles[[1]][["y"]], pch=16, col=2, cex=2)
for(i in 1:res1$n.data){	polygon(tiles[[i]], lwd=2) }
#text(d$longitude,d$latitude+0.0005,d$id,col=as.numeric(d$type)+1)
points(tiles[[1]][["x"]], tiles[[1]][["y"]], pch=16, col=2, cex=2)
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, cex=2)
plot(range(vics.pca[["x"]][,1]),range(vics.pca[["x"]][,2]),type="n")
#ボロノイ図試し
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, cex=2)
for(i in 1:res1$n.data){	polygon(tiles[[i]], lwd=2) }
figurePlot.coloredVic(torus.300, torus.vic1, 1)
rgl.snapshot("./data/torus_300_1_2.png")
voron.oricord_B<-voronoiBorder(torus.vic1.line, torus.300)
points3d(voron.oricord_B, col=2)
rgl.snapshot("./data/torus_300_intered_voro.png")
figurePlot(torus.300)
in.oricord.vo<-voronoiInterpo(torus.300, 15)
points3d(in.oricord.vo, col="orange")
points3d(in.oricord.vo, col="red")
figurePlot(torus.300)
points3d(in.oricord.vo, col="red")
rgl.snapshot("./data/torus_300_intered_all.png")
figurePlot(torus.300)
rgl.snapshot("./data/torus_300.png")
figurePlot.coloredVic(torus.300, torus.vic1, 1)
voron.oricord_B<-voronoiBorder(torus.vic1.line, torus.300)
points3d(voron.oricord_B, col=2)
plot(anu2)
plot(anu2, pch=16, cex=1.7)
