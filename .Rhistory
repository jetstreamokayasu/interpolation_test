for (i in 1:length(vic1s.pca.dist)) {
r<-vic1s.pca.dist[i]
t = seq(0, 2*pi, length=100)
plotWithLimit(cbind(r*cos(t), r*sin(t)), limit=vic1s.plot.limit)
}
#plotの範囲を最小値-0.5と最大値+0.5した値にする
plotWithLimit<-function(x, pch=0, col=0, limit=0){
if(class(limit)!="matrix"){
limit<-matrix(0, 2, 2)
rownames(limit)<-c("x", "y")
colnames(limit)<-c("min", "max")
limit["x", "min"]<-min(x[,1])-0.5
limit["x", "max"]<-max(x[,1])+0.5
limit["y", "min"]<-min(x[,2])-0.5
limit["y", "max"]<-max(x[,2])+0.5
plot(x, pch=pch, col=col, xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), asp=1)
return(limit)
}
else{
par(new=T)
plot(x, type = "l", xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), ann=F)
}
}
vic1s.plot.limit<-plotWithLimit(vics.pca[["x"]], 16, 3)
for (i in 1:length(vic1s.pca.dist)) {
r<-vic1s.pca.dist[i]
t = seq(0, 2*pi, length=100)
plotWithLimit(cbind(r*cos(t), r*sin(t)), limit=vic1s.plot.limit)
}
#plotの範囲を最小値-0.5と最大値+0.5した値にする
plotWithLimit<-function(x, pch=0, col=0, limit=0){
if(class(limit)!="matrix"){
limit<-matrix(0, 2, 2)
rownames(limit)<-c("x", "y")
colnames(limit)<-c("min", "max")
limit["x", "min"]<-min(x[,1])-0.5
limit["x", "max"]<-max(x[,1])+0.5
limit["y", "min"]<-min(x[,2])-0.5
limit["y", "max"]<-max(x[,2])+0.5
plot(x, pch=pch, col=col, xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]))
return(limit)
}
else{
par(new=T)
plot(x, type = "l", xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), ann=F)
}
}
vic1s.plot.limit<-plotWithLimit(vics.pca[["x"]], 16, 3)
vic1s.pca.dist
length(vic1s.pca.dist)
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, xlim=c(-1.5, 1.5), ylim=c(-1.2, 1.2), asp = 1)
#plotの範囲を最小値-0.5と最大値+0.5した値にする
plotWithLimit<-function(x, pch=0, col=0, limit=0){
if(class(limit)!="matrix"){
limit<-matrix(0, 2, 2)
rownames(limit)<-c("x", "y")
colnames(limit)<-c("min", "max")
limit["x", "min"]<-min(x[,1])-0.5
limit["x", "max"]<-max(x[,1])+0.5
limit["y", "min"]<-min(x[,2])-0.5
limit["y", "max"]<-max(x[,2])+0.5
plot(x, pch=pch, col=col, xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]))
return(limit)
}
else{
par(new=T)
plot(x, type = "l", xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), ann=F, asp=1)
}
}
for (i in 1:length(vic1s.pca.dist)) {
r<-vic1s.pca.dist[i]
t = seq(0, 2*pi, length=100)
plotWithLimit(cbind(r*cos(t), r*sin(t)), limit=vic1s.plot.limit)
}
#plotの範囲を最小値-0.5と最大値+0.5した値にする
plotWithLimit<-function(x, pch=0, col=0, limit=0){
if(class(limit)!="matrix"){
limit<-matrix(0, 2, 2)
rownames(limit)<-c("x", "y")
colnames(limit)<-c("min", "max")
limit["x", "min"]<-min(x[,1])-0.5
limit["x", "max"]<-max(x[,1])+0.5
limit["y", "min"]<-min(x[,2])-0.5
limit["y", "max"]<-max(x[,2])+0.5
plot(x, pch=pch, col=col, xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]))
return(limit)
}
else{
par(new=T)
plot(x, type = "l", xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), ann=F)
}
}
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, xlim=c(-1.5, 1.5), ylim=c(-1.2, 1.2), asp = 1)
for (i in 1:length(vic1s.pca.dist)) {
r<-vic1s.pca.dist[i]
t = seq(0, 2*pi, length=100)
plotWithLimit(cbind(r*cos(t), r*sin(t)), limit=vic1s.plot.limit)
}
#plotの範囲を最小値-0.5と最大値+0.5した値にする
plotWithLimit<-function(x, pch=0, col=0, limit=0){
if(class(limit)!="matrix"){
limit<-matrix(0, 2, 2)
rownames(limit)<-c("x", "y")
colnames(limit)<-c("min", "max")
limit["x", "min"]<-min(x[,1])-0.5
limit["x", "max"]<-max(x[,1])+0.5
limit["y", "min"]<-min(x[,2])-0.5
limit["y", "max"]<-max(x[,2])+0.5
plot(x, pch=pch, col=col, xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]))
return(limit)
}
else{
par(new=T)
plot(x, type = "l", xlim = c(limit["x", "min"], limit["x", "max"]), ylim = c(limit["y", "min"], limit["y", "max"]), xlab="", ylab="")
}
}
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16, xlim=c(-1.5, 1.5), ylim=c(-1.2, 1.2), asp = 1)
for (i in 1:length(vic1s.pca.dist)) {
r<-vic1s.pca.dist[i]
t = seq(0, 2*pi, length=100)
plotWithLimit(cbind(r*cos(t), r*sin(t)), limit=vic1s.plot.limit)
}
points(vics.pca[["x"]][1,1], vics.pca[["x"]][1,2], pch=16)
require(TDA)
require(myfs)
require(rgl)
circleDensity<-function(centr, x, pca.dist){
r<-sqrt(sum((centr[,1:2]-x)^2))
density<-(length(pca.dist[pca.dist>=r]))/(pi*r*r)
debugText(length(pca.dist[pca.dist>=r]))
return(density)
}
vic1.density<-circleDensity(vics.pca[["x"]][1,], vics.pca[["x"]][2,1:2], vic1s.pca.dist)
vics.pca[["x"]][1,]
vic1.density<-circleDensity(vics.pca[["x"]][1,], vics.pca[["x"]][2,1:2], vic1s.pca.dist)
circleDensity<-function(centr, x, pca.dist){
r<-sqrt(sum((centr[1:2]-x)^2))
density<-(length(pca.dist[pca.dist>=r]))/(pi*r*r)
debugText(length(pca.dist[pca.dist>=r]))
return(density)
}
vic1.density<-circleDensity(vics.pca[["x"]][1,], vics.pca[["x"]][2,1:2], vic1s.pca.dist)
circleDensity<-function(centr, x, pca.dist){
r<-sqrt(sum((centr[1:2]-x)^2))
density<-(length(pca.dist[pca.dist<=r]))/(pi*r*r)
debugText(length(pca.dist[pca.dist<=r]))
return(density)
}
vic1.density<-circleDensity(vics.pca[["x"]][1,], vics.pca[["x"]][2,1:2], vic1s.pca.dist)
vic1.density
x<-seq(vic1s.plot.limit["x", "min"], vic1s.plot.limit["x", "max"], length=100)
y<-seq(vic1s.plot.limit["y", "min"], vic1s.plot.limit["y", "max"], length=100)
cbind(x, y)
density.set<-sapply(1:length(k), function(k)circleDensity(vics.pca[["x"]][1,], cbind(x, y)[k, ], vic1s.pca.dist))
density.set<-sapply(1:length(x), function(k)circleDensity(vics.pca[["x"]][1,], cbind(x, y)[k, ], vic1s.pca.dist))
circleDensity<-function(centr, x, pca.dist){
r<-sqrt(sum((centr[1:2]-x)^2))
density<-(length(pca.dist[pca.dist<=r]))/(pi*r*r)
#debugText(length(pca.dist[pca.dist<=r]))
return(density)
}
density.set
image(x, y, density.set, col = terrain.colors(100))
volcano
persp(x, y, density.set, theta = 30, phi = 30, expand = 0.5, col = rainbow(50), border=NA)
figurePlot(torus.300)
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
calcDensitySet<-function(centr, pca.dist, x, y){
density.set<-matrix(0, length(x), length(y))
for (i in 1:length(y)) {
for (j in 1:length(x)) {
density.set[j, i]<-circleDensity(centr, c(x[j], y[i]), pca.dist)
}
}
return(density.set)
}
vic1.densityset<-calcDensitySet(vics.pca[["x"]][1,], pca.dist = vic1s.pca.dist, x, y)
vic1.densityset
image(x, y, vic1.densityset, col = terrain.colors(100))
persp(x, y, vic1.densityset, theta = 30, phi = 30, expand = 0.5, col = rainbow(50), border=NA)
image(x, y, vic1.densityset, col = terrain.colors(100))
vic1_2.dist<-get.vicinity(vic1s.pca.dist2, 1, length(vics.pca[["x"]][,1]))
vic1_2.dist<-get.vicinity(vic1s.pca.dist2, 1, length(vics.pca[["x"]][,1])-1)
vic1_2.dist
vic1_2.dist<-get.vicinity(vic1s.pca.dist2, 2, length(vics.pca[["x"]][,1])-1)
vic1_2.dist
vic1_2.densityset<-calcDensitySet(vics.pca[["x"]][2,], pca.dist = vic1_2.dist, x, y)
image(x, y, vic1_2.densityset, col = terrain.colors(100))
image(x, y, vic1_2.densityset+vic1.densityset, col = terrain.colors(100))
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord)) {
between.dist<-get.vicinity(pca.dist, 2, length(pca.cord)-1)
density.sum<-density.sum+calcDensitySet(pca.cord[i], between.dist[,3], x, y)
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
length(vics.pca[["x"]][,1:2])
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord)) {
between.dist<-get.vicinity(pca.dist, i, length(pca.cord[,1])-1)
density.sum<-density.sum+calcDensitySet(pca.cord[i], between.dist[,3], x, y)
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
length(vics.pca[["x"]][,1])
length(vics.pca[["x"]][,1])-1
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord)) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.sum<-density.sum+calcDensitySet(pca.cord[i], between.dist[,3], x, y)
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord[,1])) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.sum<-density.sum+calcDensitySet(pca.cord[i], between.dist[,3], x, y)
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1.density.sum, col = terrain.colors(100))
vic1.density.sum
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord[,1])) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.set<-calcDensitySet(pca.cord[i], between.dist[,3], x, y)
if(i==1){density.sum<-density.set}
else{density.sum<-density.sum+density.set}
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
vic1.density.sum
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord[,1])) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.set<-calcDensitySet(pca.cord[i], between.dist[,3], x, y)
if(i==1){density.sum<-density.set
debugText(density.set)
}
else{density.sum<-density.sum+density.set}
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
debugText(pca.dist)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord[,1])) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.set<-calcDensitySet(pca.cord[i], between.dist[,3], x, y)
if(i==1){density.sum<-density.set
#debugText(density.set)
}
else{density.sum<-density.sum+density.set}
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
sumDensitySet<-function(pca.cord, x, y){
pca.dist<-distance(pca.cord)
#debugText(pca.dist)
density.sum<-matrix(0, length(x), length(y))
for (i in 1:length(pca.cord[,1])) {
between.dist<-get.vicinity(pca.dist, i, (length(pca.cord[,1])-1))
density.set<-calcDensitySet(pca.cord[i,], between.dist[,3], x, y)
if(i==1){density.sum<-density.set
#debugText(density.set)
}
else{density.sum<-density.sum+density.set}
}
return(density.sum)
}
vic1.density.sum<-sumDensitySet(vics.pca[["x"]][,1:2], x, y)
vic1.density.sum
image(x, y, vic1.density.sum, col = terrain.colors(100))
persp(x, y, vic1.density.sum, theta = 30, phi = 30, expand = 0.5, col = rainbow(50), border=NA)
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
vic1s.plot.limit<-plotWithLimit(vics.pca[["x"]], 16, 3)
image(x, y, vic1.density.sum, col = terrain.colors(100))
image(x, y, vic1.density.sum, col = terrain.colors(1000))
image(x, y, vic1.density.sum, col = terrain.colors(1000))
image(x, y, vic1.density.sum, col = heat.colors(1000))
image(x, y, vic1.density.sum, col = heat.colors(100))
persp(x, y, vic1.density.sum, theta = 30, phi = 30, expand = 0.5, col = heat.colors(100), border=NA)
plot3d(x, y, vic1.density.sum)
contour(x, y, vic1.density.sum, method = "edge", vfont = c("sans serif", "plain"))
vic1s.plot.limit<-plotWithLimit(vics.pca[["x"]], 16, 3)
gridLine(vics.pca[["x"]], 4)
gridLine(vics.pca[["x"]], 4)
precip
look<- image.count(vics.pca[["x"]][,1:2], nrow=4, ncol=4)
library(fields)
look<- image.count(vics.pca[["x"]][,1:2], nrow=4, ncol=4)
install.packages("fields")
require(fields)
look<- image.count(vics.pca[["x"]][,1:2], nrow=4, ncol=4)
install.packages("./datafields_9.6.tar.gz", repos = NULL, type = "source")
install.packages("./data/fields_9.6.tar.gz", repos = NULL, type = "source")
library("fields", lib.loc="~/R/win-library/3.4")
look<- image.count(vics.pca[["x"]][,1:2], nrow=4, ncol=4)
library(ade4)
install.packages("ade4")
library("ade4", lib.loc="~/R/win-library/3.4")
data(rpjdl)
coa1 <- dudi.coa(rpjdl$fau, scannf = FALSE, nf = 4)
s.hist(coa1$li)
s.hist(coa1$li, cgrid = 2, cbr = 3, adj = 0.5, clab = 0)
s.hist(coa1$li)
s.hist(coa1$li, cgrid = 2, cbr = 3, adj = 0.5, clab = 0)
coa<- dudi.coa(vics.pca[["x"]][,1:2], scannf = FALSE, nf = 4)
vics.pca[["x"]][,1:2]
h2d <- hist2d(vics.pca[["x"]][,1:2],show=FALSE, same.scale=TRUE, nbins=c(20,30))
install.packages("gregmisc")
require(gregmisc)
install.packages("./data/gregmisc_2.1.5.tar.gz", repos = NULL, type = "source")
require(gregmisc)
install.packages("./gregmisc_2.1.5.tar.gz", repos = NULL, type = "source")
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(sqrt(sum((pca.cord[k,]-c(x, y))^2)))
}))
}
}
return(potential.sum)
}
plot(vics.pca[["x"]][,1], vics.pca[["x"]][,2], col=3, pch=16)
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
vic1s.potential
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))/10)
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
vic1s.potential
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
vic1s.potential,
vic1s.potential
range(vic1s.potential)
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
vic1s.potential
range(vic1s.potential)
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
persp(x, y, vic1s.potential, theta = 30, phi = 30, expand = 0.5, col = heat.colors(100), border=NA)
contour(x, y, vic1s.potential, method = "edge", vfont = c("sans serif", "plain"))
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
#return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
return(exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))/10)))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
persp(x, y, vic1s.potential, theta = 30, phi = 30, expand = 0.5, col = heat.colors(100), border=NA)
contour(x, y, vic1s.potential, method = "edge", vfont = c("sans serif", "plain"))
range(vic1s.potential)
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
#return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
return(exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2)))))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
#return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
return(exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2)))))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
persp(x, y, vic1s.potential, theta = 30, phi = 30, expand = 0.5, col = heat.colors(100), border=NA)
contour(x, y, vic1s.potential, method = "edge", vfont = c("sans serif", "plain"))
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
#return(exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2)))))
}))
}
}
return(potential.sum)
}
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
#return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
return(10*exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2)))))
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
image(x, y, vic1s.potential, col = terrain.colors(100))
persp(x, y, vic1s.potential, theta = 30, phi = 30, expand = 0.5, col = heat.colors(100), border=NA)
contour(x, y, vic1s.potential, method = "edge", vfont = c("sans serif", "plain"))
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
#return(10*exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2)))))
}))
}
}
return(potential.sum)
}
calcPotential<-function(pca.cord, x, y){
potential.sum<-matrix(0, length(x), length(y))
for (q in 1:length(y)) {
for(p in 1:length(x)){
potential.sum[p, q]<-sum(sapply(1:length(pca.cord[,1]), function(k){
#return(1/(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))*10))
return(exp(-(sqrt(sum((pca.cord[k,]-c(x[p], y[q]))^2))))*10)
}))
}
}
return(potential.sum)
}
vic1s.potential<-calcPotential(vics.pca[["x"]][,1:2], x, y)
contour(x, y, vic1s.potential, method = "edge", vfont = c("sans serif", "plain"))
vic1s.potential
range(vic1s.potential)
